<?php

/**
 * Implementation of hook_help().
 */
function url_alter_help($path, $arg) {
  switch ($path) {
    case 'admin/config/system/url-alter':
      return '<p>'. t('Do not use %php tags around your PHP code. Note that executing incorrect PHP-code can severely break your Drupal site.', array('%php' => '<?php ?>')) .'</p>';
  }
}

/**
 * Implementation of hook_perm().
 */
function url_alter_permission() {
  return array(
    'administer url alter' => array(
      'title' => t('Administer URL alter'),
      'description' => t('Manage PHP code that is executed for everying inbound and outbound link and configure legacy custom_url_rewrite support. %warning', array('%warning' => t('Warning: Give to trusted roles only; this permission has security implications.'))),
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function url_alter_menu() {
  $items['admin/config/system/url-alter'] = array(
    'title' => 'URL alter',
    'description' => 'Administer custom_url_rewrite function code',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('url_alter_settings_form'),
    'access arguments' => array('administer url alter'),
    'file' => 'url_alter.admin.inc',
  );

  return $items;
}

/**
 * Implementation of hook_url_inbound_alter().
 */
function url_alter_url_inbound_alter(&$result, $path, $path_language) {
  if (variable_get('url_alter_run_custom_url_rewrite_inbound', 0) && function_exists('custom_url_rewrite_inbound')) {
    custom_url_rewrite_inbound($result, $path, $path_language);
  }
  if (!url_alter_is_disabled() && ($code = variable_get('url_alter_inbound', ''))) {
    // We can not use drupal_eval() here since we need to be able to modify
    // the $result parameter.
    eval($code);
  }
}

/**
 * Implementation of hook_url_outbound_alter().
 */
function url_alter_url_outbound_alter(&$path, &$options, $original_path) {
  if (!url_alter_is_disabled() && ($code = variable_get('url_alter_outbound', ''))) {
    // We can not use drupal_eval() here since we need to be able to modify
    // the $path and $options parameters.
    eval($code);
  }
  if (variable_get('url_alter_run_custom_url_rewrite_outbound', 0) && function_exists('custom_url_rewrite_outbound')) {
    custom_url_rewrite_outbound($path, $options, $original_path);
  }
}

/**
 * Check if running the eval() url_alter code has been disabled.
 *
 * @return
 *   TRUE if the user is on the admin settings page or has disabled it via the
 *   query parameter, or FALSE otherwise.
 */
function url_alter_is_disabled() {
  return isset($_GET['url-alter-kill']) || ($_GET['q'] == 'admin/config/system/url-alter' && user_access('administer url alter'));
}

/**
 * Fetch information about a function using reflection.
 *
 * @param $function
 *   The name of the function.
 * @return
 *   A ReflectionFunction object with added file, code, and location
 *   attributes, or FALSE if the function does not exist.
 */
function url_alter_get_function_info($function) {
  if (!function_exists($function) || !class_exists('ReflectionFunction')) {
    return FALSE;
  }

  $info = new ReflectionFunction($function);
  $info->file = trim(substr($info->getFileName(), strlen(getcwd())), '\/');
  $info->location = t('line @line in @file', array('@file' => $info->file, '@line' => $info->getStartLine()));
  $file_contents = file_get_contents($info->getFileName());
  $file_contents = explode("\n", $file_contents);
  $info->code = array_slice($file_contents, $info->getStartLine(), $info->getEndLine() - $info->getStartLine() - 1);
  $info->code = implode("\n", $info->code);
  return $info;
}
